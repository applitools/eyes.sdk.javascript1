'use strict';

const { Configuration, Logger, ArgumentGuard, BatchInfo } = require('@applitools/eyes-common');

const { ImageMatchSettings } = require('./match/ImageMatchSettings');

/**
 * Abstract class with common configuration for all Eyes SDKs
 */
class EyesAbstract {
  /**
   * @param {Configuration} [configuration]
   */
  constructor(configuration = new Configuration()) {
    /** @type {Logger} */
    this._logger = new Logger(configuration.showLogs);
    /** @type {Configuration} */
    this._configuration = configuration;
    /** @type {ImageMatchSettings} */
    this._defaultMatchSettings = new ImageMatchSettings();
    this._defaultMatchSettings.setIgnoreCaret(true);
    this._defaultMatchSettings.setUseDom(false);
    this._defaultMatchSettings.setEnablePatterns(false);
  }

  /**
   * @return {Logger}
   */
  getLogger() {
    return this._logger;
  }

  /**
   * Sets a handler of log messages generated by this API.
   *
   * @param {LogHandler} logHandler - Handles log messages generated by this API.
   */
  setLogHandler(logHandler) {
    this._logger.setLogHandler(logHandler);
  }

  /**
   * @return {LogHandler} - The currently set log handler.
   */
  getLogHandler() {
    return this._logger.getLogHandler();
  }

  /**
   * @param {...string} args
   */
  log(...args) {
    this._logger.log(...args);
  }

  /**
   * @return {Configuration}
   */
  getConfiguration() {
    return this._configuration;
  }

  /**
   * @param {Configuration|object} configuration
   */
  setConfiguration(configuration) {
    if (!(configuration instanceof Configuration)) {
      configuration = new Configuration(configuration);
    }

    this._configuration = configuration;
  }

  /**
   * Sets the user given agent id of the SDK.
   *
   * @param {string} agentId - The agent ID to set.
   */
  setAgentId(agentId) {
    this._configuration.agentId = agentId;
  }

  /**
   * @return {string} - The user given agent id of the SDK.
   */
  getAgentId() {
    return this._configuration.agentId;
  }

  /**
   * Sets the API key of your Applitools Eyes account.
   *
   * @param {string} apiKey - The api key to be used.
   */
  setApiKey(apiKey) {
    this._configuration.apiKey = apiKey;
  }

  /**
   * @return {string} - The currently set API key or {@code null} if no key is set.
   */
  getApiKey() {
    return this._configuration.apiKey;
  }

  /**
   * Sets the current server URL used by the rest client.
   *
   * @param {string} serverUrl - The URI of the rest server, or {@code null} to use the default server.
   */
  setServerUrl(serverUrl) {
    this._configuration.serverUrl = serverUrl;
  }

  /**
   * @return {string} - The URI of the eyes server.
   */
  getServerUrl() {
    return this._configuration.serverUrl;
  }

  /**
   * Sets the proxy settings to be used for all requests to Eyes server.
   * Alternatively, proxy can be set via global variables `HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`.
   *
   * @signature `setProxy(proxySettings)`
   * @sigparam {ProxySettings} proxySettings - The ProxySettings instance to use.
   *
   * @signature `setProxy(isEnabled)`
   * @sigparam {boolean} isEnabled - You can pass {@code false} to completely disable proxy.
   *
   * @signature `setProxy(url, username, password)`
   * @sigparam {string} url - The proxy url to be used.
   * @sigparam {string} [username] - The proxy username to be used.
   * @sigparam {string} [password] - The proxy password to be used.
   *
   * @param {?(ProxySettings|boolean|string)} varArg - The ProxySettings object or proxy url to be used.
   *  Use {@code false} to disable proxy (even if it set via env variables). Use {@code null} to reset proxy settings.
   * @param {string} [username] - The proxy username to be used.
   * @param {string} [password] - The proxy password to be used.
   */
  setProxy(varArg, username, password) {
    if (!username && !password) {
      this._configuration.proxy = varArg;
    } else {
      this._configuration.proxy = {
        url: varArg,
        username: username,
        password: password,
      };
    }
  }

  /**
   * @return {ProxySettings} - current proxy settings used by the server connector, or {@code null} if no proxy is set.
   */
  getProxy() {
    return this._configuration.proxy;
  }

  /**
   * @return {number} - The timeout for web requests (in milliseconds).
   */
  getConnectionTimeout() {
    return this._configuration.connectionTimeout;
  }

  /**
   * Sets the connect and read timeouts for web requests.
   *
   * @param {number} connectionTimeout - Connect/Read timeout in milliseconds. 0 equals infinity.
   */
  setConnectionTimeout(connectionTimeout) {
    this._configuration.connectionTimeout = connectionTimeout;
  }

  /**
   * Whether sessions are removed immediately after they are finished.
   *
   * @param {boolean} removeSession
   */
  setRemoveSession(removeSession) {
    this._configuration.removeSession = removeSession;
  }

  /**
   * @return {boolean} - Whether sessions are removed immediately after they are finished.
   */
  getRemoveSession() {
    return this._configuration.removeSession;
  }

  /**
   * @param {boolean} isDisabled - If true, all interactions with this API will be silently ignored.
   */
  setIsDisabled(isDisabled) {
    this._configuration.isDisabled = isDisabled;
  }

  /**
   * @return {boolean} - Whether eyes is disabled.
   */
  getIsDisabled() {
    return this._configuration.isDisabled;
  }

  /**
   * @param {string} appName - The name of the application under test.
   */
  setAppName(appName) {
    this._configuration.appName = appName;
  }

  /**
   * @return {string} - The name of the application under test.
   */
  getAppName() {
    return this._configuration.appName;
  }

  /**
   * Sets the branch in which the baseline for subsequent test runs resides. If the branch does not already exist it
   * will be created under the specified parent branch (see {@link #setParentBranchName}). Changes to the baseline
   * or model of a branch do not propagate to other branches.
   *
   * @param {string} branchName - Branch name or {@code null} to specify the default branch.
   */
  setBranchName(branchName) {
    this._configuration.branchName = branchName;
  }

  /**
   * @return {string} - The current branch name.
   */
  getBranchName() {
    return this._configuration.branchName;
  }

  /**
   * Sets the branch under which new branches are created.
   *
   * @param {string} parentBranchName - Branch name or {@code null} to specify the default branch.
   */
  setParentBranchName(parentBranchName) {
    this._configuration.parentBranchName = parentBranchName;
  }

  /**
   * @return {string} - The name of the current parent branch under which new branches will be created.
   */
  getParentBranchName() {
    return this._configuration.parentBranchName;
  }

  /**
   * Sets the baseline branch under which new branches are created.
   *
   * @param {string} baselineBranchName - Branch name or {@code null} to specify the default branch.
   */
  setBaselineBranchName(baselineBranchName) {
    this._configuration.baselineBranchName = baselineBranchName;
  }

  /**
   * @return {string} - The name of the baseline branch
   */
  getBaselineBranchName() {
    return this._configuration.baselineBranchName;
  }

  /**
   * Sets the maximum time (in ms) a match operation tries to perform a match.
   * @param {number} ms - Total number of ms to wait for a match.
   */
  setMatchTimeout(ms) {
    if (this._configuration.isDisabled) {
      this._logger.verbose('Ignored');
      return;
    }

    this._configuration.matchTimeout = ms;
  }

  /**
   * @return {number} - The maximum time in ms {@link #checkWindowBase(RegionProvider, string, boolean, number)} waits
   *   for a match.
   */
  getMatchTimeout() {
    return this._configuration.matchTimeout;
  }

  /**
   * Set whether or not new tests are saved by default.
   *
   * @param {boolean} saveNewTests - True if new tests should be saved by default. False otherwise.
   */
  setSaveNewTests(saveNewTests) {
    this._configuration.saveNewTests = saveNewTests;
  }

  /**
   * @return {boolean} - True if new tests are saved by default.
   */
  getSaveNewTests() {
    return this._configuration.saveNewTests;
  }

  /**
   * Set whether or not failed tests are saved by default.
   *
   * @param {boolean} saveFailedTests - True if failed tests should be saved by default, false otherwise.
   */
  setSaveFailedTests(saveFailedTests) {
    this._configuration.saveFailedTests = saveFailedTests;
  }

  /**
   * @return {boolean} - True if failed tests are saved by default.
   */
  getSaveFailedTests() {
    return this._configuration.saveFailedTests;
  }

  /**
   * Sets the batch in which context future tests will run or {@code null} if tests are to run standalone.
   *
   * @param {BatchInfo|string} batchOrName - The batch name or batch object
   * @param {string} [batchId] - ID of the batch, should be generated using GeneralUtils.guid()
   * @param {string} [startedAt] - Start date of the batch, can be created as new Date().toUTCString()
   */
  setBatch(batchOrName, batchId, startedAt) {
    if (this._configuration.isDisabled) {
      this._logger.verbose('Ignored');
      return;
    }

    if (batchOrName instanceof BatchInfo || !batchOrName) {
      this._configuration.batch = batchOrName;
    } else {
      this._configuration.batch = {
        id: batchId,
        name: batchOrName,
        startedAt: startedAt,
      };
    }

    this._logger.verbose(`setBatch(${this._configuration._batch})`);
  }

  /**
   * @return {BatchInfo} - The currently set batch info.
   */
  getBatch() {
    return this._configuration.batch;
  }

  /**
   * Adds a property to be sent to the server.
   *
   * @param {string} name - The property name.
   * @param {string} value - The property value.
   */
  addProperty(name, value) {
    return this._configuration.addProperty(name, value);
  }

  /**
   * Clears the list of custom properties.
   */
  clearProperties() {
    this._configuration.properties = [];
  }

  /**
   * Automatically save differences as a baseline.
   *
   * @param {boolean} saveDiffs - Sets whether to automatically save differences as baseline.
   */
  setSaveDiffs(saveDiffs) {
    this._configuration.saveDiffs = saveDiffs;
  }

  /**
   * @return {boolean} - whether to automatically save differences as baseline.
   */
  getSaveDiffs() {
    return this._configuration.saveDiffs;
  }

  /**
   * @param {boolean} sendDom
   */
  setSendDom(sendDom) {
    this._configuration.sendDom = sendDom;
  }

  /**
   * @return {boolean}
   */
  getSendDom() {
    return this._configuration.sendDom;
  }

  /**
   * @param {boolean} compareWithParentBranch - New compareWithParentBranch value, default is false
   */
  setCompareWithParentBranch(compareWithParentBranch) {
    this._configuration.compareWithParentBranch = compareWithParentBranch;
  }

  /**
   * @deprecated Use {@link #getCompareWithParentBranch()} instead
   * @return {boolean} - The currently compareWithParentBranch value
   */
  isCompareWithParentBranch() {
    return this._configuration.compareWithParentBranch;
  }

  /**
   * @return {boolean} - The currently compareWithParentBranch value
   */
  getCompareWithParentBranch() {
    return this._configuration.compareWithParentBranch;
  }

  /**
   * @param {boolean} ignoreBaseline - New ignoreBaseline value, default is false
   */
  setIgnoreBaseline(ignoreBaseline) {
    this._configuration.ignoreBaseline = ignoreBaseline;
  }

  /**
   * @deprecated Use {@link #getIgnoreBaseline()} instead
   * @return {boolean} - The currently ignoreBaseline value
   */
  isIgnoreBaseline() {
    return this._configuration.ignoreBaseline;
  }

  /**
   * @return {boolean} - The currently ignoreBaseline value
   */
  getIgnoreBaseline() {
    return this._configuration.ignoreBaseline;
  }

  /**
   * @deprecated Only available for backward compatibility. See {@link #setBaselineEnvName(string)}.
   * @param {string} baselineName - If specified, determines the baseline to compare with and disables automatic baseline
   *   inference.
   */
  setBaselineName(baselineName) {
    this.setBaselineEnvName(baselineName);
  }

  /**
   * @deprecated Only available for backward compatibility. See {@link #getBaselineEnvName()}.
   * @return {string} - The baseline name, if it was specified.
   */
  getBaselineName() {
    return this.getBaselineEnvName();
  }

  /**
   * If not {@code null}, determines the name of the environment of the baseline.
   *
   * @param {string} baselineEnvName - The name of the baseline's environment.
   */
  setBaselineEnvName(baselineEnvName) {
    this._logger.log(`Baseline environment name: ${baselineEnvName}`);
    this._configuration.baselineEnvName = baselineEnvName;
  }

  /**
   * If not {@code null}, determines the name of the environment of the baseline.
   *
   * @return {string} - The name of the baseline's environment, or {@code null} if no such name was set.
   */
  getBaselineEnvName() {
    return this._configuration.baselineEnvName;
  }

  /**
   * If not {@code null} specifies a name for the environment in which the application under test is running.
   *
   * @param {string} envName - The name of the environment of the baseline.
   */
  setEnvName(envName) {
    this._logger.log(`Environment name: ${envName}`);
    this._configuration.environmentName = envName;
  }

  /**
   * If not {@code null} specifies a name for the environment in which the application under test is running.
   *
   * @return {string} - The name of the environment of the baseline, or {@code null} if no such name was set.
   */
  getEnvName() {
    return this._configuration.environmentName;
  }

  /**
   * @param {string} testName - The name of the currently running test.
   */
  setTestName(testName) {
    this._configuration.testName = testName;
  }

  /**
   * @return {?string} - The name of the currently running test.
   */
  getTestName() {
    return this._configuration.testName;
  }

  /**
   * @return {ImageMatchSettings} - The match settings used for the session.
   */
  getDefaultMatchSettings() {
    return this._defaultMatchSettings;
  }

  /**
   * Updates the match settings to be used for the session.
   *
   * @param {ImageMatchSettings} defaultMatchSettings - The match settings to be used for the session.
   */
  setDefaultMatchSettings(defaultMatchSettings) {
    ArgumentGuard.notNull(defaultMatchSettings, 'defaultMatchSettings');
    this._defaultMatchSettings = defaultMatchSettings;
  }

  /**
   * The test-wide match level to use when checking application screenshot with the expected output.
   *
   * @param {MatchLevel} matchLevel - The test-wide match level to use when checking application screenshot with the
   *   expected output.
   */
  setMatchLevel(matchLevel) {
    this._defaultMatchSettings.setMatchLevel(matchLevel);
  }

  /**
   * @return {MatchLevel} - The test-wide match level.
   */
  getMatchLevel() {
    return this._defaultMatchSettings.getMatchLevel();
  }

  /**
   * The test-wide useDom to use.
   *
   * @param {boolean} useDom - The test-wide useDom to use in match requests.
   */
  setUseDom(useDom) {
    this._defaultMatchSettings.setUseDom(useDom);
  }

  /**
   * @return {boolean} - The test-wide useDom to use in match requests.
   */
  getUseDom() {
    return this._defaultMatchSettings.getUseDom();
  }

  /**
   * The test-wide enablePatterns to use.
   *
   * @param {boolean} enablePatterns - The test-wide enablePatterns to use in match requests.
   */
  setEnablePatterns(enablePatterns) {
    this._defaultMatchSettings.setEnablePatterns(enablePatterns);
  }

  /**
   * @return {boolean} - The test-wide enablePatterns to use in match requests.
   */
  getEnablePatterns() {
    return this._defaultMatchSettings.getEnablePatterns();
  }

  /**
   * Sets the ignore blinking caret value.
   *
   * @param {boolean} value - The ignore value.
   */
  setIgnoreCaret(value) {
    this._defaultMatchSettings.setIgnoreCaret(value);
  }

  /**
   * @return {boolean} - Whether to ignore or the blinking caret or not when comparing images.
   */
  getIgnoreCaret() {
    const ignoreCaret = this._defaultMatchSettings.getIgnoreCaret();
    return ignoreCaret || true;
  }
}

exports.EyesAbstract = EyesAbstract;
