const {makeEmitTracker} = require('@applitools/sdk-coverage-tests')
const sdkName = 'eyes-testcafe'

function initialize() {
  const result = makeEmitTracker()
  result.storeHook('deps', `const {Eyes, StitchMode, Target} = require('../../../index')`)
  result.storeHook('vars', `const eyes = new Eyes()`)
  let baselineTestName
  function _setup(options) {
    baselineTestName = options.baselineTestName
    result.storeHook('beforeEach', `eyes.setBranchName('${options.branchName}')`)
    options.executionMode.isCssStitching
      ? result.storeHook('beforeEach', `eyes.setStitchMode(StitchMode.CSS)`)
      : undefined
    options.executionMode.isScrollStitching
      ? result.storeHook('beforeEach', `eyes.setStitchMode(StitchMode.SCROLL)`)
      : undefined
    result.storeHook(
      'beforeEach',
      `if (process.env.APPLITOOLS_API_KEY_SDK) {
        eyes.setApiKey(process.env.APPLITOOLS_API_KEY_SDK)
      }`,
    )
  }
  function abort() {}
  function visit(url) {
    result.storeCommand(`await driver.navigateTo('${url}')`)
  }
  function open(options) {
    const viewportSizes = options.viewportSize.split('x')
    result.storeCommand(
      `await eyes.open(driver, '${options.appName}', '${baselineTestName}', {width: ${viewportSizes[0]}, height: ${viewportSizes[1]}})`,
    )
  }
  function checkFrame() {}
  function checkRegion() {}
  function checkWindow(options) {
    const isFully = !!(options && options.isFully)
    result.storeCommand(`await eyes.check(undefined, Target.window().fully(${isFully}))`)
  }
  function close(_options) {
    result.storeCommand(`await eyes.close()`)
  }
  function getAllTestResults() {}
  function scrollDown() {}
  function switchToFrame() {}
  function type() {}
  return {
    hooks: {
      beforeEach: _setup,
    },
    out: result,
    abort,
    checkFrame,
    checkRegion,
    checkWindow,
    close,
    getAllTestResults,
    open,
    scrollDown,
    switchToFrame,
    type,
    visit,
  }
}

function createTestCafeTestString(emittedTest) {
  return `// Generated by sdk-test-kit
${emittedTest.hooks.deps.join('\n')}
${emittedTest.hooks.vars.join('\n')}

fixture\`${emittedTest.name}\`
.beforeEach(async () => {
  ${emittedTest.hooks.beforeEach.join('\n  ')}
})
.after(async () => {
  ${emittedTest.hooks.afterEach.join('\n  ')}
})

test('${emittedTest.name}', async driver => {
  ${emittedTest.commands.join('\n  ')}
})`
}

const supportedTests = [
  // viewport
  {name: 'TestCheckWindow_Fluent', executionMode: {isCssStitching: true}},
  {name: 'TestCheckWindow_Fluent', executionMode: {isScrollStitching: true}},
  // full page
  {name: 'TestCheckPageWithHeader_Window_Fully', executionMode: {isCssStitching: true}},
  {name: 'TestCheckPageWithHeader_Window_Fully', executionMode: {isScrollStitching: true}},
]

module.exports = {
  name: sdkName,
  initialize,
  supportedTests,
  testFrameworkTemplate: createTestCafeTestString,
}
